name: Release Client

on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build client binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23.x"
          cache: true

      - name: Build
        run: |
          mkdir -p dist
          OUT="showoff-client-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then OUT="$OUT.exe"; fi
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} CGO_ENABLED=0 go build -ldflags "-s -w" -o dist/$OUT ./cmd/client

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: client-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*

  release:
    name: Create GitHub Release
    needs: build-and-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: client-*
          path: dist
          merge-multiple: true

      - name: Generate version tag
        id: vars
        run: |
          SHA_SHORT=$(echo $GITHUB_SHA | cut -c1-7)
          DATE=$(date +%Y%m%d-%H%M%S)
          echo "tag=v0.0.0-${DATE}-${SHA_SHORT}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.vars.outputs.tag }}
          name: ${{ steps.vars.outputs.tag }}
          draft: false
          prerelease: true
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
